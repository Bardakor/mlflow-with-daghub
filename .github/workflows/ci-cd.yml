name: MLFlow Model CI/CD

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  DOCKER_IMAGE_NAME: mlflow-model

jobs:
  train-and-deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Fetch full history for DVC
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Cache Python dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Configure DVC (optional)
      run: |
        dvc remote modify origin --local auth basic
        dvc remote modify origin --local user ${{ secrets.DAGSHUB_USERNAME }}
        dvc remote modify origin --local password ${{ secrets.DAGSHUB_TOKEN }}
      env:
        DAGSHUB_USERNAME: ${{ secrets.DAGSHUB_USERNAME }}
        DAGSHUB_TOKEN: ${{ secrets.DAGSHUB_TOKEN }}
      continue-on-error: true
    
    - name: Pull data with DVC (if available)
      run: |
        echo "Attempting to pull data with DVC..."
        dvc pull || echo "DVC pull failed - will use sklearn dataset directly"
      continue-on-error: true
    
    - name: Ensure data availability
      run: |
        echo "Checking data availability..."
        if [ -f "data/raw_dataset.csv" ]; then
          echo "Raw dataset found locally"
          ls -lh data/raw_dataset.csv
        else
          echo "Creating dataset from sklearn digits..."
          python create_sample_data.py
        fi
    
    - name: Debug environment before training
      run: |
        echo "Python version:"
        python --version
        echo "Current directory:"
        pwd
        echo "Files in current directory:"
        ls -la
        echo "Environment variables debug:"
        echo "MLFLOW_TRACKING_URI set: $([[ -n \"$MLFLOW_TRACKING_URI\" ]] && echo \"Yes\" || echo \"No\")"
        echo "DAGSHUB_TOKEN set: $([[ -n \"$DAGSHUB_TOKEN\" ]] && echo \"Yes\" || echo \"No\")"
        echo "Testing basic Python imports..."
        python -c "import mlflow; import dagshub; import sklearn; print('All imports successful')"
    
    - name: Run MLflow notebook and train models
      run: |
        echo "Starting ML model training..."
        
        # Check if we have DagHub credentials
        if [[ -z "$DAGSHUB_TOKEN" ]]; then
          echo "No DagHub token provided - using safe mode (no MLflow tracking)"
          python run_training.py --mode safe
        else
          echo "DagHub token available - attempting full pipeline"
          echo "Testing DagHub connection first..."
          
          # Test DagHub connection with timeout
          if timeout 60 python -c "import dagshub; dagshub.init(repo_owner='Bardakor', repo_name='mlflow-with-daghub', mlflow=True); print('DagHub connection successful')"; then
            echo "DagHub connection successful - proceeding with full notebook"
            echo "Timeout set to 15 minutes"
            
            if timeout 900 python run_training.py --mode notebook; then
              echo "Full notebook execution successful"
            else
              echo "Full notebook failed or timed out - trying fast version"
              if timeout 300 python run_training.py --mode fast; then
                echo "Fast version successful"
              else
                echo "Fast version also failed - falling back to safe mode"
                python run_training.py --mode safe
              fi
            fi
          else
            echo "DagHub connection test failed - using safe mode"
            python run_training.py --mode safe
          fi
        fi
        
        echo "Model training completed!"
      env:
        MLFLOW_TRACKING_URI: https://dagshub.com/Bardakor/mlflow-with-daghub.mlflow
        MLFLOW_TRACKING_USERNAME: ${{ secrets.DAGSHUB_TOKEN }}
        MLFLOW_TRACKING_PASSWORD: ${{ secrets.DAGSHUB_TOKEN }}
        DAGSHUB_TOKEN: ${{ secrets.DAGSHUB_TOKEN }}
        PYTHONUNBUFFERED: 1
      timeout-minutes: 30
    
    - name: Generate model metadata
      run: |
        echo "Generating model metadata..."
        python generate_metadata.py
        echo "Metadata generation completed!"
    
    - name: Verify model files
      run: |
        echo "Verifying generated files..."
        ls -la models/
        if [ ! -f "models/best_model.pkl" ]; then
          echo "best_model.pkl not found!"
          exit 1
        fi
        if [ ! -f "models/model_metadata.json" ]; then
          echo "model_metadata.json not found!"
          exit 1
        fi
        echo "All required files present!"
        echo "Model metadata:"
        cat models/model_metadata.json
    
    - name: Push data and models to DVC (if configured)
      run: |
        echo "Attempting to push to DVC..."
        dvc add models/best_model.pkl models/model_metadata.json || echo "DVC add failed"
        dvc push || echo "DVC push failed - continuing without DVC storage"
      continue-on-error: true
      env:
        DAGSHUB_USERNAME: ${{ secrets.DAGSHUB_USERNAME }}
        DAGSHUB_TOKEN: ${{ secrets.DAGSHUB_TOKEN }}
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
    
    - name: Extract metadata for Docker
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ secrets.DOCKER_USERNAME }}/${{ env.DOCKER_IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
    
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        platforms: linux/amd64,linux/arm64
        cache-from: type=gha
        cache-to: type=gha,mode=max
        build-args: |
          BUILDKIT_INLINE_CACHE=1
    
    - name: Test Docker image
      run: |
        echo "Testing Docker image..."
        # Pull and test the image
        docker run --rm -d -p 5000:5000 --name test-container ${{ secrets.DOCKER_USERNAME }}/${{ env.DOCKER_IMAGE_NAME }}:latest
        sleep 15
        
        # Test health endpoint
        if curl -f http://localhost:5000/health; then
          echo "Health check passed!"
        else
          echo "Health check failed!"
          docker logs test-container
          exit 1
        fi
        
        # Test model info endpoint
        if curl -f http://localhost:5000/model_info; then
          echo "Model info endpoint passed!"
        else
          echo "Model info endpoint failed!"
        fi
        
        docker stop test-container
        echo "Docker image tests completed successfully!"
      if: github.event_name == 'push' && github.ref == 'refs/heads/main'